#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
This file is the entry point for provisioning
"""

__author__      = 'Antoine Schonewille'
__copyright__   = 'Copyright 2023, Luna2 Project'
__license__     = 'GPL'
__version__     = '2.0'
__maintainer__  = 'Dev-team'
__email__       = 'antoine.schonewille@clustervision.com'
__status__      = 'Development'

#VERSION: 0.2

import sys, getopt
from builtins import dict
import requests
import re
import json

CONF=dict()

# ============================================================================

def main(argv):
    NODES=None
    GROUPS=None
    INTERFACES=None
    ACTION=None
    for i in range(0, len(argv)):
#        print("ARGC ["+str(i)+"]: ["+argv[i]+"]")
        if (argv[i] == "-h" or argv[i] == "--help"):
             help()
             exit()
        elif (argv[i] == "-g" or argv[i] == "--groups"):
             i+=1
             GROUPS=argv[i]
        elif (argv[i] and not NODES):
             NODES=argv[i]
        elif (argv[i] in ['status','on','off','reset','cycle','identify','noidentify']):
             ACTION=argv[i]
        else:
             print("Error: Invalid options used.")
             help()
             exit()
    if (len(argv) == 0):
        help()
        exit()
    if ((NODES is None) or (ACTION is None)):
        print("Error: Instruction incomplete. Nodes and Task expected.")
        help()
        exit()
    handleRequest(nodes=NODES,groups=GROUPS,action=ACTION)
    exit()

# ============================================================================

def help():
    print ("""
usage: lpower [-h] [--groups GROUPS] [--interface INTERFACE]
              [hosts] {status,on,off,reset,cycle,identify,noidentify}

BMC power management.

positional arguments:
  hosts                 Host list
  {status,on,off,reset,cycle,identify,noidentify}
                        Action

optional arguments:
  -h, --help            show this help message and exit
  --groups GROUPS, -g GROUPS
                        Group list
  --interface INTERFACE, -i INTERFACE
                        Interface to use instead of "BMC"
    """)


# ----------------------------------------------------------------------------

def readConfigFile():
    read=0
    api = re.compile("^(\[API\])")
    regex = re.compile("^(.[^=]+)\s+?=\s+?(.*)$")
    try:
        with open("/trinity/local/luna/config/luna.ini") as f:
            for line in f:
                if (not read):
                    result = api.match(line)
                    if (result):
                        read=1
                else:
                    result = regex.match(line)
                    if (result):
                        CONF[result.group(1)]=result.group(2)
    except:
        print("Error: /trinity/local/luna/config/luna.ini Does not exist and i cannot continue\n")
        exit(1)

#    for key in CONF:
#        print(key, '->', CONF[key])


# ----------------------------------------------------------------------------

def getToken():
    if (('USERNAME' not in CONF) or ('PASSWORD' not in CONF) or ('ENDPOINT' not in CONF)):
        readConfigFile()
    if (('USERNAME' not in CONF) or ('PASSWORD' not in CONF) or ('ENDPOINT' not in CONF)):
        print("Error: username/password/endpoint not found in config file. i cannot continue\n")
        exit(2)

    token_credentials = {'username': CONF['USERNAME'],'password': CONF['PASSWORD']}
    try:
        x = requests.post('http://'+CONF["ENDPOINT"]+'/token', json = token_credentials)
        DATA=json.loads(x.text)
        CONF["TOKEN"]=DATA["token"]
    except requests.exceptions.HTTPError as err:
        print("Error: trouble getting my token: "+str(err))
        exit(3)
    except requests.exceptions.ConnectionError as err:
        print("Error: trouble getting my token: "+str(err))
        exit(3)
    except requests.exceptions.Timeout as err:
        print("Error: trouble getting my token: "+str(err))
        exit(3)
    except:
        print("Error: trouble getting my token for unknown reasons")
        exit(3)

# ----------------------------------------------------------------------------

def handleRequest(nodes=None,groups=None,interface=None,action=None):
    if ((not nodes is None) and (not action is None)):
        if ('TOKEN' not in CONF):
            getToken()
        if ('ENDPOINT' not in CONF):
            readConfigFile()

        headers = {'x-access-tokens': CONF['TOKEN']}

        regex = re.compile("^([a-zA-Z0-9_]+)$")
        result = regex.match(nodes)
        DATA = ''

        if (result and nodes == result.group(1)):
            r = requests.get('http://'+CONF["ENDPOINT"]+'/control/power/node001/'+action,headers=headers)
            if (r.text):
                DATA=json.loads(r.text)
            if (str(r.status_code) == "204"):
                print(nodes+": succes "+action)
            elif('control' in DATA):
                print(nodes+": "+str(DATA['control']['status']))
            else:
                # when we don't know how to handle the returned data
                print("["+str(r.status_code)+'] ::: '+r.text)
        else:
            body = {'control': { 'power': { action: { 'hostlist': nodes } } } }
            r = requests.post('http://'+CONF["ENDPOINT"]+'/control/power', json=body, headers=headers)
            if (r.text):
                DATA=json.loads(r.text)
                if (type(DATA) is dict):
                    for control in DATA.keys:
                        for power in DATA[control].keys:
                            for result in DATA[control][power].keys:
                                print(str(DATA[control][power][result]['hostlist'])+": "+str(result))
                else:
                    print(str(r.status_code)+' ::: '+r.text)
            else:
                print(str(r.status_code)+' ::: '+r.text)

# ----------------------------------------------------------------------------

main(sys.argv[1:])


