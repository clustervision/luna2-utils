#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
This file is the entry point for provisioning
"""

__author__      = 'Antoine Schonewille'
__copyright__   = 'Copyright 2023, Luna2 Project'
__license__     = 'GPL'
__version__     = '2.0'
__maintainer__  = 'Dev-team'
__email__       = 'antoine.schonewille@clustervision.com'
__status__      = 'Development'

#VERSION: 0.1

import sys, getopt
from builtins import dict
import requests
import re
import json

CONF=dict()

# ============================================================================

def main(argv):
    NODES=None
    GROUPS=None
    INTERFACES=None
    ACTION=None
    for i in range(0, len(argv)):
#        print("ARGC ["+str(i)+"]: ["+argv[i]+"]")
        if (argv[i] == "-h" or argv[i] == "--help"):
             help()
             exit()
        elif (argv[i] == "-g" or argv[i] == "--groups"):
             i+=1
             GROUPS=argv[i]
        elif (argv[i] and not NODES):
             NODES=argv[i]
        elif (argv[i] in ['status','on','off','reset','cycle','identify','noidentify']):
             ACTION=argv[i]
        else:
             print("Error: Invalid options used.")
             help()
             exit()
    if (len(argv) == 0):
        help()
        exit()
    if ((NODES is None) or (ACTION is None)):
        print("Error: Instruction incomplete. Nodes and Task expected.")
        help()
        exit()
    handleRequest(nodes=NODES,groups=GROUPS,action=ACTION)
    exit()

# ============================================================================

def help():
    print ("""
usage: lpower [-h] [--groups GROUPS] [--interface INTERFACE]
              [hosts] {status,on,off,reset,cycle,identify,noidentify}

BMC power management.

positional arguments:
  hosts                 Host list
  {status,on,off,reset,cycle,identify,noidentify}
                        Action

optional arguments:
  -h, --help            show this help message and exit
  --groups GROUPS, -g GROUPS
                        Group list
  --interface INTERFACE, -i INTERFACE
                        Interface to use instead of "BMC"
    """)


# ----------------------------------------------------------------------------

def readConfigFile():
    regex = re.compile("^(.[^=]+)\s+?=\s+?(.*)$")
    with open("/trinity/local/luna/config/luna.ini") as f:
        for line in f:
            result = regex.match(line)
            if (result):
                CONF[result.group(1)]=result.group(2)

#    for key in CONF:
#        print(key, '->', CONF[key])


# ----------------------------------------------------------------------------

def getToken():
    if (('USERNAME' not in CONF) or ('PASSWORD' not in CONF)):
        readConfigFile()

    token_credentials = {'username': CONF['USERNAME'],'password': CONF['PASSWORD']}

    x = requests.post('http://'+CONF["ENDPOINT"]+'/token', json = token_credentials)
#    print(str(x.status_code)+' ::: '+x.text)

    DATA=json.loads(x.text)
    CONF["TOKEN"]=DATA["token"]


# ----------------------------------------------------------------------------

def getStatus(nodes=None):
    if ('TOKEN' not in CONF):
        getToken()
    if ('ENDPOINT' not in CONF):
        readConfigFile()

    headers = {'x-access-tokens': CONF['TOKEN']}
#    print(headers)

    r = requests.get('http://'+CONF["ENDPOINT"]+'/control/power/node001/status',headers=headers) #, auth=('user', 'pass'))
    print(str(r.status_code)+' ::: '+r.text)


    r = requests.get('http://'+CONF["ENDPOINT"]+'/control/power/node001/_on',headers=headers)
    print(str(r.status_code)+' ::: '+r.text)


# ----------------------------------------------------------------------------

def handleRequest(nodes=None,groups=None,interface=None,action=None):
    print("Nodes="+str(nodes)+", groups="+str(groups)+", action="+str(action))
    if ((not nodes is None) and (not action is None)):
        getStatus(nodes)

# ----------------------------------------------------------------------------

main(sys.argv[1:])


